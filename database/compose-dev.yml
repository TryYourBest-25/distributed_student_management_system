networks:
  citus_network:
    driver: bridge

volumes:
  coordinator_data:
  worker1_data:
  worker2_data:
  healthcheck-data:
  # mount implicitly creates haproxy_config

services:
  citus_coordinator:
    image: citusdata/citus:13.0-pg16
    container_name: citus_coordinator
    env_file:
      - .dev.env
    environment:
      - EXPECTED_WORKERS=2
    volumes:
      - coordinator_data:/var/lib/postgresql/data
      - ./scripts:/opt/scripts
    labels: ["com.citusdata.role=Master"]
    networks:
      - citus_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  citus_worker_1:
    image: citusdata/citus:13.0-pg16
    container_name: citus_worker_1
    env_file:
      - .dev.env
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - worker1_data:/var/lib/postgresql/data
      - healthcheck-data:/healthcheck
     # - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - citus_network
    labels: ["com.citusdata.role=Worker"]
    command: "/wait-for-manager.sh"
    depends_on:
      citus_coordinator:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -q"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  citus_worker_2:
    image: citusdata/citus:13.0-pg16
    container_name: citus_worker_2
    env_file:
      - .dev.env
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - worker2_data:/var/lib/postgresql/data
      - healthcheck-data:/healthcheck
      #- ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - citus_network
    labels: ["com.citusdata.role=Worker"]
    command: "/wait-for-manager.sh"
    depends_on:
      citus_coordinator:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -q"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  citus_manager:
    image: citusdata/membership-manager:0.3.0
    container_name: citus_manager
    env_file:
      - .dev.env
    volumes:
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock
      - healthcheck-data:/healthcheck
    networks:
      - citus_network
    depends_on:
      citus_coordinator:
        condition: service_healthy
    environment:
      - CITUS_HOST=citus_coordinator
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=${POSTGRES_DB}
    restart: unless-stopped

  schema_initializer:
    image: postgres:16-alpine
    container_name: schema_initializer
    env_file:
      - .dev.env
    environment:
      - EXPECTED_WORKERS=2
    volumes:
      - ./coordinator_scripts:/scripts
      - ./init-scripts:/schema_files
    command: ["/scripts/initialize_schema.sh"]
    networks:
      - citus_network
    depends_on:
      citus_coordinator:
        condition: service_healthy
      citus_manager:
        condition: service_started
    restart: "no"

  haproxy:
    image: haproxy:3.0
    container_name: haproxy_citus_lb
    ports:
      - "16432:16432"
      - "8404:8404"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - citus_network
    depends_on:
      - citus_coordinator
      - citus_worker_1
      - citus_worker_2
    restart: unless-stopped 